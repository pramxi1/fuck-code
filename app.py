import os
import pandas as pd
from flask import Flask, render_template, request, jsonify, session, send_file
import pymannkendall as mk
import seasonal_test as s_test
import dma as dma
import sma as sma
import ets as ets
import hws as hws
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO
import base64
from statsmodels.tsa.seasonal import seasonal_decompose
from accuracy import calculate_mse, calculate_rmse, calculate_mape
from matplotlib.dates import DateFormatter
from flask_session import Session  # ‚úÖ Import Flask-Session
from statsmodels.tsa.stattools import adfuller

app = Flask(__name__)  # ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Flask-Session (‡πÄ‡∏Å‡πá‡∏ö session ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå)
app.config["SESSION_TYPE"] = "filesystem"
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_USE_SIGNER"] = True
app.config["SESSION_FILE_DIR"] = "./session_data"  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö session
Session(app)  # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Flask-Session

PORT = 8080  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
UPLOAD_FOLDER = "uploads"
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

app.secret_key = b'_5#y2L"F4Q8z\n\xec]/'  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö session ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

@app.route("/")
def index():
    return render_template("index.html")


@app.route("/requirement")
def requirement():
    return render_template("requirement.html")


@app.route("/import_file", methods=["GET", "POST"])
def import_file():
    if request.method == "POST":
        if "file" not in request.files:
            return jsonify({"message": "No file part"}), 400
        file = request.files["file"]
        if file.filename == "":
            return jsonify({"message": "No selected file"}), 400
        if file:
            # session.pop('cached_plot_data', default=None)
            # session.pop('html_table', default=None)
            session["cached_plot_data"] = None
            session["html_table"] = None
            filename = "data.csv"
            file.save(os.path.join(app.config["UPLOAD_FOLDER"], filename))
            return jsonify({"message": "File uploaded successfully"}), 200
    else:
        return render_template("import_file.html")


import matplotlib.pyplot as plt
from io import BytesIO
import base64
from statsmodels.tsa.seasonal import seasonal_decompose

@app.route("/trend")
def trend():
    trend_ = 0
    seasonal_ = 0

    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
    df = pd.read_csv("./uploads/data.csv")

    try:
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'sale' ‡πÄ‡∏õ‡πá‡∏ô float
        df["sale"] = df["sale"].astype(float)
    except ValueError as e:
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ',' ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
        df["sale"] = pd.to_numeric(df["sale"].str.replace(",", ""), errors='coerce')
        df.dropna(subset=["sale"], inplace=True)  # ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô

    x = df["sale"]

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏î‡πâ‡∏ß‡∏¢ Mann-Kendall Test
    trend_result = mk.original_test(x)
    
    print("Trend:", trend_result.trend)
    print("Hypothesis Test Result:", trend_result.h)
    print("p-value:", trend_result.p)
    print("z-score:", trend_result.z)

    if trend_result.trend in ["increasing", "decreasing"]:
        trend_ += 1

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏• (Seasonality Test)
    s_result = s_test.sk_test(x.values)

    if s_result.p < 0.05:
        seasonal_ += 1
        print("Seasonal: have Seasonal")
    # ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Seasonal Decomposition
    decomposition = seasonal_decompose(x, model="additive", period=30)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
    trend_fig = plt.figure(figsize=(14, 6))
    plt.plot(df.index, x, label="Original Data")
    plt.plot(df.index, decomposition.trend, label="Trend", color="orange", linewidth=2)
    plt.legend()
    plt.title("Trend Analysis")
    plt.xlabel("Index")
    plt.ylabel("Sale")
    plt.grid()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏Å‡∏ô X
    ax = plt.gca()
    ax.xaxis.set_major_formatter(DateFormatter("%d/%m/%Y"))  # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
    plt.gcf().autofmt_xdate()  # ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡πá‡∏ô base64 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ù‡∏±‡∏á‡πÉ‡∏ô HTML
    trend_img = BytesIO()
    plt.savefig(trend_img, format="png")
    trend_img.seek(0)
    trend_base64 = base64.b64encode(trend_img.getvalue()).decode()

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
    seasonal_fig = plt.figure(figsize=(14, 6))
    plt.plot(decomposition.seasonal, label="Seasonality", color="green")
    plt.title("Seasonality Analysis")
    plt.xlabel("Index")
    plt.ylabel("Seasonal Effect")
    plt.grid()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏Å‡∏ô X
    ax = plt.gca()
    ax.xaxis.set_major_formatter(DateFormatter("%d/%m/%Y"))  # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
    plt.gcf().autofmt_xdate()  # ‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡πá‡∏ô base64 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ù‡∏±‡∏á‡πÉ‡∏ô HTML
    seasonal_img = BytesIO()
    plt.savefig(seasonal_img, format="png")
    seasonal_img.seek(0)
    seasonal_base64 = base64.b64encode(seasonal_img.getvalue()).decode()

    # Render HTML ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
    session["trend"] = trend_
    session["seasonal"] = seasonal_
    return render_template(
        "trend_and_seasonal_testing.html",
        trend_result=trend_result,
        s_result=s_result,
        trend_graph=trend_base64,
        seasonal_graph=seasonal_base64,
    )


@app.route("/model")
def model():
    # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô session ‡∏Å‡πà‡∏≠‡∏ô
    for key in ["predictions", "actual_values", "dates", "cached_plot_data"]:
        session.pop(key, None)

    session.modified = True  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Flask ‡∏à‡∏≥ session ‡πÉ‡∏´‡∏°‡πà

    trend_ = session.get("trend", 0)
    seasonal_ = session.get("seasonal", 0)

    if trend_ > 0 and seasonal_ > 0:
        print("üî• Running HWS Model...")
        result, df = hws.run()
        df.rename(columns={"HWS_Forecast": "predictions"}, inplace=True)
    elif trend_ > 0 and seasonal_ == 0:
        print("üî• Running DMA Model...")
        result, df = dma.run()
        df.rename(columns={"DMA": "predictions"}, inplace=True)
    elif trend_ == 0 and seasonal_ > 0:
        print("üî• Running ETS Model...")
        result, df = ets.run()
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'forecast' ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å ETS
        df.rename(columns={"forecast": "predictions"}, inplace=True)  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    else:
        print("üî• Running SMA Model...")  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ trend ‡πÅ‡∏•‡∏∞ seasonality ‡∏à‡∏∞‡πÉ‡∏ä‡πâ SMA
        result, df = sma.run()
        df.rename(columns={"SMA": "predictions"}, inplace=True)

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ñ‡πà‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
    session["dates"] = df.index.astype(str).tolist()
    session["predictions"] = df["predictions"].tolist()[:100]  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 100 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    session["actual_values"] = df["sale"].tolist()[:100]  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 100 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

    session.modified = True  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Flask ‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ session ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß

    print(f"‚úÖ Predictions stored in session (first 10): {session['predictions'][:10]}")
    print(f"‚úÖ Actual values stored in session (first 10): {session['actual_values'][:10]}")

    return render_template("forecast.html", result=result, html_table=df.to_html(index=False))


@app.route("/model2")
def model2():
    # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô session ‡∏Å‡πà‡∏≠‡∏ô
    for key in ["predictions", "actual_values", "dates", "cached_plot_data"]:
        session.pop(key, None)

    session.modified = True  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Flask ‡∏à‡∏≥ session ‡πÉ‡∏´‡∏°‡πà

    trend_ = session.get("trend", 0)
    seasonal_ = session.get("seasonal", 0)

    if trend_ > 0 and seasonal_ > 0:
        print("üî• Running HWS Model...")
        result, df = hws.run()
        df.rename(columns={"HWS_Forecast": "predictions"}, inplace=True)
    elif trend_ > 0 and seasonal_ == 0:
        print("üî• Running DMA Model...")
        result, df = dma.run()
        df.rename(columns={"DMA": "predictions"}, inplace=True)
    elif trend_ == 0 and seasonal_ > 0:
        print("üî• Running ETS Model...")
        result, df = ets.run()
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'forecast' ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å ETS
        df.rename(columns={"forecast": "predictions"}, inplace=True)  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    else:
        print("üî• Running SMA Model...")  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ trend ‡πÅ‡∏•‡∏∞ seasonality ‡∏à‡∏∞‡πÉ‡∏ä‡πâ SMA
        result, df = sma.run()
        df.rename(columns={"SMA": "predictions"}, inplace=True)

    if "date" not in df.columns:
        df["date"] = df.index.strftime("%d/%m/%Y")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå date ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    
    column_order = ["date"] + [col for col in df.columns if col != "date"]
    df = df[column_order]

    session["predictions"] = df["predictions"].tolist()
    session["actual_values"] = df["sale"].tolist()
    session["dates"] = df["date"].tolist()
    session["cached_plot_data"] = result  # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
    session.modified = True  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Flask ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session

    print(f"‚úÖ Predictions stored in session: {session['predictions'][:10]}")
    print(f"‚úÖ Actual values stored in session: {session['actual_values'][:10]}")


    return render_template("forecast_table.html", html_table=df.to_html(index=False))

@app.route("/forecast_accuracy")
def forecast_accuracy():
    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if "predictions" not in session or "actual_values" not in session:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Session")
        return jsonify({"message": "No predictions or actual values available"}), 400

    predictions = session["predictions"]
    actual_values = session["actual_values"]

    if len(predictions) == 0 or len(actual_values) == 0:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
        return jsonify({"message": "No valid data available for accuracy calculation"}), 400

    print(f"üì¢ Session Predictions: {predictions[:10]}")
    print(f"üì¢ Session Actual Values: {actual_values[:10]}")

    predictions = np.array(predictions, dtype=np.float64)
    actual_values = np.array(actual_values, dtype=np.float64)

    # ‚úÖ ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á actual_values
    predictions = np.nan_to_num(predictions, nan=np.nanmean(actual_values))

    mask = ~np.isnan(predictions) & ~np.isnan(actual_values)
    predictions, actual_values = predictions[mask], actual_values[mask]

    mse_value = round(calculate_mse(predictions, actual_values), 3)
    mape_value = round(calculate_mape(predictions, actual_values), 3)
    rmse_value = round(calculate_rmse(predictions, actual_values), 3)

    print(f"üéØ Final MSE: {mse_value}, MAPE: {mape_value}, RMSE: {rmse_value}")

    return render_template(
        "forecast_accuracy.html",
        mse_value=mse_value,
        mape_value=mape_value,
        rmse_value=rmse_value,
    )


@app.route("/download_forecast")
def download_forecast():
    df_forecast = pd.DataFrame({
        "Date": session.get("dates", []),
        "Actual Sales": session.get("actual_values", []),
        "Predictions": session.get("predictions", [])
    })

    output_dir = "uploads"
    os.makedirs(output_dir, exist_ok=True)
    forecast_file = os.path.join(output_dir, "forecast_results.csv")
    df_forecast.to_csv(forecast_file, index=False)

    return send_file(forecast_file, as_attachment=True)


@app.route("/download_page")
def download_page():
    return render_template("download.html")

@app.route("/download_plot")
def download_plot():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    plot_file = "uploads/forecast_plot.png"  # ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ
    if not os.path.exists(plot_file):
        print("‚ö†Ô∏è No plot image found!")
        return jsonify({"message": "No plot image available"}), 400
    
    return send_file(plot_file, as_attachment=True)


if __name__ == "__main__":
    print("Starting server on port", PORT)
    app.run(port=PORT, debug=True)